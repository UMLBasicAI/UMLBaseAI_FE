version: 2.1

orbs:
  node: circleci/node@5.1.0

executors:
  node-executor:
    docker:
      - image: cimg/node:18.20
    working_directory: ~/project

jobs:
  build:
    executor: node-executor
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: npm install --loglevel=error --no-fund --no-audit

      - run:
          name: SonarCloud Scan
          command: |
            curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
            unzip sonar-scanner.zip
            export PATH=$PATH:$PWD/sonar-scanner-5.0.1.3006-linux/bin

            sonar-scanner \
              -Dsonar.projectKey=UMLBasicAI_UMLBaseAI_FE \
              -Dsonar.organization=umlbasicai \
              -Dsonar.sources=. \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=$SONAR_TOKEN \
              -Dsonar.coverage.exclusions=** \
              -Dsonar.issue.ignore.multicriteria=e1,e2 \
              -Dsonar.issue.ignore.multicriteria.e1.ruleKey=typescript:S2245 \
              -Dsonar.issue.ignore.multicriteria.e1.resourceKey=**/*.tsx \
              -Dsonar.issue.ignore.multicriteria.e2.ruleKey=typescript:S2068 \
              -Dsonar.issue.ignore.multicriteria.e2.resourceKey=**/*.js

      - run:
          name: Build Next.js frontend
          command: npm run build

      - persist_to_workspace:
          root: .
          paths:
            - .next
            # - node_modules
            - public
            - package.json
            - package-lock.json
            - ecosystem.config.js
            - next.config.mjs
            - src
            - tsconfig.json
            - tailwind.config.ts
            - postcss.config.mjs

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:l773R58oKSwz7pggORkLHL2XxUko5EMWHOMuu2AvS/8"

      - run:
          name: Install rsync on CI environment
          command: |
            sudo apt update && sudo apt install -y rsync

      - attach_workspace:
          at: ~/project

      - run:
          name: Set environment and deploy
          command: |
            case "${CIRCLE_BRANCH}" in
              main)
                ENV_BRANCH="production"
                ;;
              dev)
                ENV_BRANCH="development"
                ;;
              test)
                ENV_BRANCH="tst"
                ;;
              *)
                echo "Unknown branch. Skipping deployment."
                exit 1
                ;;
            esac

            echo "ENV_BRANCH resolved as ${ENV_BRANCH}"

            ENV_FILE=".env.${ENV_BRANCH}"
            echo "Creating ${ENV_FILE} from ENV_PROD_BASE64"
            echo "$ENV_PROD_BASE64" | base64 --decode > ~/${ENV_FILE}

      - run:
          name: Copy environment files to remote server
          command: |
            case "${CIRCLE_BRANCH}" in
              main)
                ENV_BRANCH="production"
                ;;
              dev)
                ENV_BRANCH="development"
                ;;
              test)
                ENV_BRANCH="tst"
                ;;
              *)
                echo "Unknown branch. Skipping deployment."
                exit 1
                ;;
            esac

            ENV_FILE=".env.${ENV_BRANCH}"

            echo "ENV_FILE=${ENV_FILE}"
            echo "ENV_BRANCH=${ENV_BRANCH}"
            ls -l ~/${ENV_FILE} || { echo "‚ùå ${ENV_FILE} not found!"; exit 1; }

            echo "Checking or creating remote directory for ${ENV_BRANCH}..."
            ssh -o StrictHostKeyChecking=no adminplantuml@20.189.124.231 << EOF
              BASE_DIR="/home/adminplantuml/apps/umlbasicai-fe"
              TARGET_DIR="\$BASE_DIR/${ENV_BRANCH}"
              mkdir -p "\$TARGET_DIR"
            EOF

            echo "Copying ${ENV_FILE} to remote server..."
            scp -o StrictHostKeyChecking=no ~/${ENV_FILE} adminplantuml@20.189.124.231:/home/adminplantuml/apps/umlbasicai-fe/${ENV_BRANCH}/${ENV_FILE}
            echo "${ENV_FILE} has been copied successfully."

            echo "Preparing .env file for rsync..."
            cp ~/${ENV_FILE} ~/project/.env
            
      - run:
          name: Sync project files to VPS using rsync
          command: |
            case "${CIRCLE_BRANCH}" in
              main)
                ENV_BRANCH="production"
                ;;
              dev)
                ENV_BRANCH="development"
                ;;
              test)
                ENV_BRANCH="tst"
                ;;
              *)
                echo "Unknown branch. Skipping deployment."
                exit 1
                ;;
            esac

            APP_DIR="/home/adminplantuml/apps/umlbasicai-fe/${ENV_BRANCH}"

            echo "üîß Checking and installing rsync on remote VPS..."
            ssh -o StrictHostKeyChecking=no adminplantuml@20.189.124.231 "
              mkdir -p $APP_DIR
              if ! command -v rsync &> /dev/null; then
                echo 'üîß rsync not found. Installing...'
                sudo apt update && sudo apt install -y rsync
              else
                echo '‚úÖ rsync already installed.'
              fi
            "

            echo "üîÑ Syncing files to VPS using rsync..."
            rsync -avz --delete \
              -e "ssh -o StrictHostKeyChecking=no" \
              ~/project/ \
              adminplantuml@20.189.124.231:$APP_DIR

      - run:
          name: Check and Install Node.js/npm
          command: |
            case "${CIRCLE_BRANCH}" in
              main)
                ENV_BRANCH="production"
                ;;
              dev)
                ENV_BRANCH="development"
                ;;
              test)
                ENV_BRANCH="tst"
                ;;
              *)
                echo "Unknown branch. Skipping deployment."
                exit 1
                ;;
            esac
            ssh -o StrictHostKeyChecking=no adminplantuml@20.189.124.231 \<< EOF
           

              cd /home/adminplantuml/apps/umlbasicai-fe/${ENV_BRANCH}

              echo "üîç Checking Node.js and npm..."
              if ! command -v npm &> /dev/null || ! command -v node &> /dev/null; then
                echo "üîß Installing Node.js..."
                curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - 
                sudo apt-get install -y nodejs
              else
                echo "‚úÖ Node.js and npm already installed."
              fi
            EOF

      - run:
          name: Install deps & build on VPS
          command: |
            case "${CIRCLE_BRANCH}" in
              main)
                ENV_BRANCH="production"
                ;;
              dev)
                ENV_BRANCH="development"
                ;;
              test)
                ENV_BRANCH="tst"
                ;;
              *)
                echo "Unknown branch. Skipping deployment."
                exit 1
                ;;
            esac
            echo "ENV_BRANCH=${ENV_BRANCH}"
            ssh -o StrictHostKeyChecking=no adminplantuml@20.189.124.231 \<< EOF
              cd /home/adminplantuml/apps/umlbasicai-fe/${ENV_BRANCH}
              echo "Running in $(pwd)"
              npm install --loglevel=error --no-fund --no-audit
              npm run build
            EOF

      - run:
          name: Restart with PM2
          command: |
            case "${CIRCLE_BRANCH}" in
              main)
                ENV_BRANCH="production"
                ;;
              dev)
                ENV_BRANCH="development"
                ;;
              test)
                ENV_BRANCH="tst"
                ;;
              *)
                echo "Unknown branch. Skipping deployment."
                exit 1
                ;;
            esac
            ssh -o StrictHostKeyChecking=no adminplantuml@20.189.124.231 \<< EOF

              cd /home/adminplantuml/apps/umlbasicai-fe/${ENV_BRANCH}
              echo "Running in $(pwd)"
              echo "üîç Checking if PM2 is installed..."
              if ! command -v pm2 &> /dev/null; then
                echo "üîß PM2 not found. Installing globally..."
                sudo npm install -g pm2
              else
                echo "‚úÖ PM2 already installed."
              fi

              echo "‚ôªÔ∏è Restarting app using PM2..."
              pm2 restart ecosystem.config.js --only nextjs-${ENV_BRANCH} || pm2 start ecosystem.config.js --only nextjs-${ENV_BRANCH}
            EOF

workflows:
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - dev
                - tst
